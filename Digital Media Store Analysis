--In this project, I queried a data set containing data about a digital media store. Including tables for artists, albums, media tracks, invoices, and customers.

--Question: Show Customers (their full names, customer ID, and country) who are not in the US
--Approach: We include the required columns in the select statement. We use the <> operator to filter the results and include all countries with the exception of USA.

SELECT FirstName, LastName, Customerid, Country FROM chinook.customers
WHERE Country <> 'USA';

--Question: Show only the Customers from Brazil.
--Approach: We use * to select all columns. We use a where clause to filter the resulta and include only Brazil.

SELECT * FROM chinook.customers
WHERE Country = 'Brazil';

--Question: Find the invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and 
billing country.
--Approach: We need to join the customers and invoices table for this information. We use an inner join to get the matching records on both sides. The column in common is customer id,
so we join on this field. We filter the results using a where clause and include the specified columns.

SELECT c.FirstName, c.LastName, i.invoiceid , i.InvoiceDate, i.BillingCountry
FROM chinook.customers c
INNER JOIN chinook.invoices i
ON c.customerid = i.customerid
WHERE i.BillingCountry = 'Brazil';

--Question: Show the Employees who are Sales Agents.
--Approach: We use * to select all columns. We use a where clause to filter the results to Sales Support Agents only.

SELECT * FROM chinook.employees
WHERE Title = 'Sales Support Agent';

--Question: Find a unique/distinct list of billing countries from the Invoice table.
--Approach: We use the distinct operator to get unique values of billing countries from the invoice table.

SELECT distinct BillingCountry FROM chinook.invoices;

--Question: Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
--Approach: We need to join the customers table with the employees table using their column in common. We also need to join the invoices table on a common column. We inlcude first and 
last name from the employees table and all of the columns from the invoices table.

SELECT e.FirstName, e.LastName, i.* FROM chinook.employees e
INNER JOIN chinook.customers c
ON e.Employeeid = c.SupportRepid
INNER JOIN chinook.invoices i
ON c.Customerid = i.Customerid;

--Question: Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
--Approach: We need to join the invoices, customers, and employyes table using their columns in common. We include the required columns from each table in our select statement.

SELECT i.Total, c.FirstName, c.LastName, c.Country, e.FirstName, e.LastName
FROM chinook.invoices i 
INNER JOIN chinook.customers c
on i.CustomerId = c.CustomerId
INNER JOIN chinook.employees e
on c.SupportRepId = e.EmployeeId;

--Question: How many Invoices were there in 2009?
--Approach: We use the count function in order to get a total number of rows from the invoices table. We filter using a where clause and the like operator to limit the results to 2009.

SELECT COUNT(*) FROM chinook.invoices
WHERE InvoiceDate LIKE '%2009%';

--Question: What are the total sales for 2009?
--Approach: We use the sum function in order to get a sum of the total sales. We round to 2 decimals to get a dollar amount. We use a where clause to filter the results to 2009.

SELECT ROUND(SUM(Total), 2) AS '2009 Sales' FROM chinook.invoices
WHERE InvoiceDate LIKE '%2009%';

--Question: Write a query that includes the purchased track name with each invoice line ID.
--Approach: We need to join the invoice items table to the tracks table using the trackid column. We use an inner join to gather the matching values and include the specified columns in
the select statement.

SELECT t.Name, i.Invoicelineid FROM chinook.invoice_items i
INNER JOIN chinook.tracks t on
i.Trackid = t.Trackid;

--Question: Write a query that includes the purchased track name AND artist name with each invoice line ID.
--Approach: We need to join the invoice items table, tracks table, albums table, and artists table to get the specified columns. We use inner joins to retrieve the matching values from 
each table and join on their common columns.

SELECT s.Name, t.Name, i.Invoicelineid FROM chinook.invoice_items i
INNER JOIN chinook.tracks t
on i.TrackId = t.TrackId
INNER JOIN chinook.albums a
on a.AlbumId = t.AlbumId
INNER JOIN chinook.artists s
on s.ArtistId = a.ArtistId

--Question: Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
--Approach: We need to join the tracks table, albums table, media types table, and genre table to get the specified columns. We use inner joins to retrieve the matching values from 
each table and join on their common columns.

SELECT t.Name as track, a.Title as album, m.Name as mediatype, g.Name as genre 
FROM chinook.tracks t
INNER JOIN chinook.albums a
on t.AlbumId = a.AlbumId
INNER JOIN chinook.media_types m
on t.MediaTypeId = m.MediaTypeId
INNER JOIN chinook.genres g
on t.GenreId = g.GenreId

--Question: Show the total sales made by each sales agent.
--Approach: We need to join the invoices table, customers table, and employees table to retrieve the specified data. We use the sum function in order to aggregate the sales and round to 
2 decimal places to get a dollar value. We lastly, group by first name since we used an aggregate function.

select ROUND(SUM(i.Total), 2) as totalsales, e.FirstName, E.LastName from chinook.invoices i
INNER JOIN chinook.customers c
on i.Customerid = c.Customerid
INNER JOIN chinook.employees e
on c.SupportRepid = e.Employeeid
GROUP BY e.FirstName;

--Question: Which sales agent made the most dollars in sales in 2009?
--Approach: We need to join the invoices table, customers table, and employees table. We similary use the sum function, round to 2 decimals, and group by first name like in the last step
to aggregate the total sales. To filter the results we use a where clause and like operator for results only in 2009. We order the results by total sales from highest to lowest and limit
to the first result to get the top sales number.

select ROUND(SUM(i.Total), 2) as totalsales, e.FirstName, E.LastName from chinook.invoices i
INNER JOIN chinook.customers c
on i.Customerid = c.Customerid
INNER JOIN chinook.employees e
on c.SupportRepid = e.Employeeid
WHERE InvoiceDate LIKE '%2009%'
GROUP BY e.FirstName
ORDER BY totalsales DESC
LIMIT 1;

--Question: Display each sales agent's average total per invoice next to a list of all their sales.
--Approach: We use a window function in order to display the avergae sales next to the first name. We join the customers table and employees table to the invoices table to gather the 
pertinent data and select the relevant columns.

select e.FirstName, e.LastName, i.Total, 
AVG(Total) OVER (PARTITION BY e.FirstName) as Average_sale
from chinook.invoices i
INNER JOIN chinook.customers c
on i.Customerid = c.Customerid
INNER JOIN chinook.employees e
on c.SupportRepid = e.Employeeid;
