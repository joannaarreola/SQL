

--Find the details of each customer regardless of whether the customer made an order. Output the customer's first name, last name, and the city along with the order details.
You may have duplicate rows in your results due to a customer ordering several of the same items. Sort records based on the customer's first name and the order details
in ascending order.

SELECT customers.first_name, customers.last_name, customers.city, orders.order_details FROM customers
LEFT OUTER JOIN orders
ON customers.id = orders.cust_id
ORDER BY customers.first_name, orders.order_details;

--Find all posts which were reacted to with a heart. For such posts output all columns from facebook_posts table.

SELECT DISTINCT b.*
FROM facebook_reactions AS a
INNER JOIN facebook_posts AS b
ON a.post_id = b.post_id
WHERE a.reaction = 'heart';

--Find the average number of bathrooms and bedrooms for each cityâ€™s property types. Output the result along with the city name and the property type.

select city, property_type, AVG(bathrooms), AVG(bedrooms) from airbnb_search_details
GROUP BY city, property_type;

--We have a table with employees and their salaries, however, some of the records are old and contain outdated salary information. Find the current salary of each employee
assuming that salaries increase each year. Output their id, first name, last name, department ID, and current salary. Order your list by employee ID in ascending order.

select id, first_name, last_name, department_id, MAX(salary) as current_salary from ms_employee_salary
GROUP BY id;

--Find all Lyft drivers who earn either equal to or less than 30k USD or equal to or more than 70k USD. Output all details related to retrieved records.

SELECT * FROM lyft_drivers
WHERE yearly_salary <= 30000
OR yearly_salary >= 70000;

--Meta/Facebook has developed a new programing language called measure the popularity of Hack they ran a survey with their employees. The survey included data on previous
programing familiarity as well as the number of years of experience, age, gender and most importantly satisfaction with Hack. Due to an error location data was not 
collected, but your supervisor demands a report showing average popularity of Hack by office location. Luckily the user IDs of employees completing the surveys were 
stored.
Based on the above, find the average popularity of the Hack per office location.
Output the location along with the average popularity.

SELECT fe.location, AVG(fhs.popularity) FROM facebook_hack_survey fhs
INNER JOIN facebook_employees fe
on fhs.employee_id = fe.id
GROUP BY fe.location;

--Find libraries who haven't provided the email address in circulation year 2016 but their notice preference definition is set to email.
Output the library code.

select distinct home_library_code from library_usage
WHERE circulation_active_year = 2016
AND notice_preference_definition = "email"
AND provided_email_address = 0;

--Count the number of movies that Abigail Breslin was nominated for an oscar.

select COUNT(*) from oscar_nominees
WHERE nominee = "Abigail Breslin";

--Count the number of user events performed by MacBookPro users.
Output the result along with the event name.
Sort the result based on the event count in the descending order.

select COUNT(*), event_name from playbook_events
WHERE device = "macbook pro"
GROUP BY event_name
ORDER BY COUNT(*) DESC;

--Find the activity date and the pe_description of facilities with the name 'STREET CHURROS' and with a score of less than 95 points.

select activity_date, pe_description from los_angeles_restaurant_health_inspections
WHERE facility_name = "STREET CHURROS"
AND score < 95;

--Find the base pay for Police Captains. Output the employee name along with the corresponding base pay.

SELECT employeename, basepay FROM sf_public_salaries
WHERE jobtitle LIKE "%Captain%";

--Find the last time each bike was in use. Output both the bike number and the date-timestamp of the bike's last use (i.e., the date-time the bike was returned). 
Order the results by bikes that were most recently used.

select bike_number, max(end_time) from dc_bikeshare_q1_2012
GROUP BY bike_number
ORDER BY end_time desc;

--Find order details made by Jill and Eva.
Consider the Jill and Eva as first names of customers.
Output the order date, details and cost along with the first name.
Order records based on the customer id in ascending order.

SELECT orders.order_details, orders.order_date, orders.total_order_cost, customers.first_name FROM orders
INNER JOIN customers
on customers.id = orders.cust_id
WHERE first_name = "Jill" OR first_name = "Eva"
ORDER BY customers.id ASC;

--Find the most profitable company from the financial sector. Output the result along with the continent.

SELECT company, continent FROM forbes_global_2010_2014
WHERE sector = 'Financials'
ORDER BY profits DESC
LIMIT 1;

--Write a query that calculates the difference between the highest salaries found in the marketing and engineering departments. Output just the absolute difference in
salaries.

SELECT ABS((SELECT MAX(dbe.salary) FROM db_employee dbe
INNER JOIN db_dept dbd
on dbe.department_id = dbd.id
WHERE department = 'marketing')
-
(SELECT MAX(dbe.salary) FROM db_employee dbe
INNER JOIN db_dept dbd
on dbe.department_id = dbd.id
WHERE department = 'engineering'))
AS difference;

--Compare each employee's salary with the average salary of the corresponding department.
Output the department, first name, and salary of employees along with the average salary of that department.

WITH salary_avg_tab as (
select department, AVG(salary) as avgsal from employee
GROUP BY department
)
select e.department, e.first_name, e.last_name, salary, sat.avgsal from employee e
INNER JOIN salary_avg_tab sat
on sat.department = e.department;

--Find how many times each artist appeared on the Spotify ranking list
Output the artist name along with the corresponding number of occurrences.
Order records by the number of occurrences in descending order.

select artist, count(artist) from spotify_worldwide_daily_song_ranking
GROUP BY artist
ORDER BY count(artist) DESC;

--Find the number of apartments per nationality that are owned by people under 30 years old.
Output the nationality along with the number of apartments.
Sort records by the apartments count in descending order.

SELECT nationality, COUNT(distinct au.unit_id) FROM airbnb_hosts
INNER JOIN airbnb_units au
on airbnb_hosts.host_id = au.host_id
WHERE unit_type = "Apartment"
AND age < 30
GROUP BY nationality
ORDER by COUNT(distinct au.unit_id) DESC;

--Find the 3 most profitable companies in the entire world.
Output the result along with the corresponding company name.
Sort the result based on profits in descending order.

SELECT company, profits FROM forbes_global_2010_2014
ORDER BY profits DESC
LIMIT 3;

--Find the average total compensation based on employee titles and gender. Total compensation is calculated by adding both the salary and bonus of each employee.
However, not every employee receives a bonus so disregard employees without bonuses in your calculation. Employee can receive more than one bonus.
Output the employee title, gender (i.e., sex), along with the average total compensation.

WITH totbonus AS (
SELECT worker_ref_id as wrid, SUM(bonus) as tbonus FROM sf_bonus
GROUP BY worker_ref_id)
SELECT sfe.employee_title, sfe.sex, AVG(sfe.salary + tb.tbonus) FROM sf_employee sfe
INNER JOIN totbonus tb
ON tb.wrid = sfe.id
GROUP BY sfe.employee_title, sfe.sex;

--Find the top 5 businesses with most reviews. Assume that each row has a unique business_id such that the total reviews for each business is listed on each row.
Output the business name along with the total number of reviews and order your results by the total reviews in descending order.

select name, review_count from yelp_business
ORDER BY review_count DESC
LIMIT 5;

--Find songs that have ranked in the top position. Output the track name and the number of times it ranked at the top. Sort your records by the number of times the song 
was in the top position in descending order.

select trackname, COUNT(*) from spotify_worldwide_daily_song_ranking
WHERE position = 1
GROUP BY trackname
ORDER BY COUNT(*) DESC;

--You have been asked to find the job titles of the highest-paid employees.
Your output should include the highest-paid title or multiple titles with the same salary.

SELECT t.worker_title FROM worker w
INNER JOIN title t
on w.worker_id = t.worker_ref_id
WHERE w.salary = (SELECT max(salary) FROM worker);

--Find the employee with the highest salary per department.
Output the department name, employee's first name along with the corresponding salary.

WITH maxsalaries as(
SELECT department as dept, MAX(salary) as maxsalary from employee e1
GROUP BY department)
SELECT e2.department, e2.first_name, maxsalaries.maxsalary from employee e2
INNER JOIN maxsalaries
on e2.salary = maxsalaries.maxsalary;

--Find the highest target achieved by the employee or employees who works under the manager id 13. Output the first name of the employee and target achieved. 
The solution should show the highest target achieved under manager_id=13 and which employee(s) achieved it.

SELECT first_name, target FROM salesforce_employees
WHERE target =
(SELECT MAX(target) FROM salesforce_employees WHERE manager_id = 13)
AND manager_id = 13;

--You're given a dataset of health inspections. Count the number of violation in an inspection in 'Roxanne Cafe' for each year. If an inspection resulted in a violation,
there will be a value in the 'violation_id' column. Output the number of violations by year in ascending order.

SELECT COUNT(*), Substring(inspection_date, 1, 4) as year FROM sf_restaurant_health_violations
WHERE business_name = "Roxanne Cafe"
AND violation_id <> " "
GROUP BY Substring(inspection_date, 1, 4);

--Calculate the total revenue from each customer in March 2019. Include only customers who were active in March 2019.
Output the revenue along with the customer id and sort the results based on the revenue in descending order.

select SUM(total_order_cost) as total_revenue, cust_id from orders
WHERE order_date LIKE "2019-03%"
GROUP BY cust_id
ORDER BY total_revenue DESC;

--Find the rate of processed tickets for each type

select type, SUM(processed)/COUNT(type) as rate from facebook_complaints
GROUP BY type;

--What were the top 10 ranked songs in 2010?
Output the rank, group name, and song name but do not show the same song twice.
Sort the result based on the year_rank in ascending order.

select distinct year_rank, group_name, song_name from billboard_top_100_year_end
WHERE year = 2010
ORDER BY year_rank ASC
LIMIT 10;

--Find the customer with the highest daily total order cost between 2019-02-01 to 2019-05-01. If customer had more than one order on a certain day, sum the order costs 
on daily basis. Output customer's first name, total cost of their items, and the date.
For simplicity, you can assume that every first name in the dataset is unique.

select c.id, first_name, order_date, SUM(total_order_cost) from customers c
INNER JOIN orders o
on c.id = o.cust_id
WHERE order_date between '2019-02-01' and '2019-05-01'
GROUP BY id, first_name, order_date
ORDER BY SUM(total_order_cost) DESC
LIMIT 1;

--Classify each business as either a restaurant, cafe, school, or other.
â€¢	A restaurant should have the word 'restaurant' in the business name.
â€¢	A cafe should have either 'cafe', 'cafÃ©', or 'coffee' in the business name.
â€¢	A school should have the word 'school' in the business name.
â€¢	All other businesses should be classified as 'other'.
Output the business name and their classification.

select distinct business_name,
CASE
WHEN lower(business_name) LIKE "%restaurant%" THEN "restaurant"
WHEN lower(business_name) LIKE "%cafe%"
or lower(business_name) LIKE "%cafÃ©%"
or lower(business_name) LIKE "%coffee%" THEN "cafe"
WHEN lower(business_name) LIKE "%school%" THEN "school"
ELSE "other"
END AS Classification
from sf_restaurant_health_violations;

--Find employees who are earning more than their managers. Output the employee's first name along with the corresponding salary.

select e1.first_name, e1.salary from employee e1
inner join employee e2
on e1.manager_id = e2.id
WHERE e1.salary > e2.salary;

--Find the review_text that received the highest number of 'cool' votes.
Output the business name along with the review text with the highest numbef of 'cool' votes.

select business_name, review_text, cool from yelp_reviews
where cool = (select max(cool) from yelp_reviews);

--Find the date with the highest total energy consumption from the Meta/Facebook data centers. Output the date along with the total energy consumption across all data 
centers.
select date, sum(consumption) as tot_consumption from
(SELECT * FROM fb_asia_energy
UNION
SELECT * FROM fb_na_energy
UNION
SELECT * FROM fb_eu_energy eu) tottab
GROUP BY date
ORDER BY tot_consumption DESC
limit 2;

--Find the Olympics with the highest number of athletes. The Olympics game is a combination of the year and the season, and is found in the 'games' column. 
Output the Olympics along with the corresponding number of athletes.

select COUNT(distinct id), games from olympics_athletes_events
GROUP BY games
ORDER BY count(distinct id) DESC
limit 1;

--Find matching hosts and guests pairs in a way that they are both of the same gender and nationality.
Output the host id and the guest id of matched pair.

select distinct ah.host_id, ag.guest_id from airbnb_hosts ah
INNER JOIN airbnb_guests ag
on ah.nationality = ag.nationality
WHERE ah.gender = ag.gender;










