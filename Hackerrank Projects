--This is a series of SQL I've written to query different tables from Hackerrank practice problems.

--Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

SELECT * FROM CITY
WHERE COUNTRYCODE = "USA"
AND POPULATION > 100000;

--Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

SELECT NAME FROM CITY 
WHERE COUNTRYCODE = 'USA'
AND POPULATION > 120000;

--Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

SELECT DISTINCT CITY FROM STATION
WHERE ID % 2 = 0;

--Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

SELECT (count(CITY) - count(distinct CITY)) from STATION;

--Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

(SELECT CITY, LENGTH(CITY) FROM STATION 
ORDER BY LENGTH(CITY) ASC, CITY ASC LIMIT 1) 
UNION 
(SELECT CITY, LENGTH(CITY) FROM STATION 
ORDER BY LENGTH(CITY) DESC, CITY ASC LIMIT 1);

--Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY LIKE "A%"
OR CITY LIKE "E%"
OR CITY LIKE "I%"
OR CITY LIKE "O%"
OR CITY LIKE "U%";

--Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '^[aeiouAEIOU].*[aeiouAEIOU]$';

--Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '^[^aeiouAEIOU]';

--Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '[^aeiouAEIOU]$';

--Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '^[^aeiouAEIOU].*|.*[^aeiouAEIOU]$';

--Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '^[^aeiouAEIOU].*[^aeiouAEIOU]$';

--Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name.
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT Name FROM STUDENTS 
WHERE Marks > 75
ORDER BY Substr(Name, -3, 3), ID;

--Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 2000 per month
who have been employees for less than 10 months. Sort your result by ascending employee_id.

SELECT name FROM Employee
WHERE salary > 2000
AND months < 10
ORDER BY employee_id ASC;

--Generate the following two result sets:
1. Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a paranthetical
(i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
2. Query the number of occurrences of each occupation in OCCUPATIONS. Sort the occurences in ascending order, and output them in the following format:
There are a total of [occupation_count] [occupations]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name, If more than
one Occupation has the same [occupation_count], they should be ordered alphabetically.

(SELECT CONCAT(name, '(', substr(occupation, 1, 1), ')') N
FROM OCCUPATIONS) 
UNION
(SELECT CONCAT('There are a total of ', COUNT(Occupation), ' ', lower(occupation), 's.') FROM 
occupations
GROUP BY Occupation)
ORDER BY N ASC;



