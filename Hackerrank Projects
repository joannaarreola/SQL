--This is a series of SQL I've written to query different tables from Hackerrank practice problems. The queries get more difficult as you scroll.

--Basic:
--Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

SELECT * FROM CITY
WHERE COUNTRYCODE = "USA"
AND POPULATION > 100000;

--Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

SELECT NAME FROM CITY 
WHERE COUNTRYCODE = 'USA'
AND POPULATION > 120000;

--Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

SELECT DISTINCT CITY FROM STATION
WHERE ID % 2 = 0;

--Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

SELECT (count(CITY) - count(distinct CITY)) from STATION;

--Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

(SELECT CITY, LENGTH(CITY) FROM STATION 
ORDER BY LENGTH(CITY) ASC, CITY ASC LIMIT 1) 
UNION 
(SELECT CITY, LENGTH(CITY) FROM STATION 
ORDER BY LENGTH(CITY) DESC, CITY ASC LIMIT 1);

--Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY LIKE "A%"
OR CITY LIKE "E%"
OR CITY LIKE "I%"
OR CITY LIKE "O%"
OR CITY LIKE "U%";

--Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '^[aeiouAEIOU].*[aeiouAEIOU]$';

--Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '^[^aeiouAEIOU]';

--Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '[^aeiouAEIOU]$';

--Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '^[^aeiouAEIOU].*|.*[^aeiouAEIOU]$';

--Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY  RLIKE '^[^aeiouAEIOU].*[^aeiouAEIOU]$';

--Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name.
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT Name FROM STUDENTS 
WHERE Marks > 75
ORDER BY Substr(Name, -3, 3), ID;

--Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 2000 per month
who have been employees for less than 10 months. Sort your result by ascending employee_id.

SELECT name FROM Employee
WHERE salary > 2000
AND months < 10
ORDER BY employee_id ASC;

Write a query identifying the type of each record in the TRIANGLES table using its three side lengths.
Output one of the following statements for each record in the table:
Equilateral: It's a traingle with 3 sides of equal length
Isosceles: It's a traingle with 2 sides of equal length
Scalene: It's a traingle with 3 sides of differing lengths
Not a triangle: The given values of A, B, and C don't form a triangle

SELECT
  CASE 
    WHEN A + B <= C or A + C <= B or B + C <= A THEN 'Not A Triangle'
    WHEN A = B and B = C THEN 'Equilateral'
    WHEN A = B or A = C or B = C THEN 'Isosceles'
    WHEN A <> B and B <> C THEN 'Scalene'
  END AS triangle_type
FROM TRIANGLES;

--Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's 0 key
was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed),
and the actual average salary.
Write a query calculating the amount of error (i.e.: actual - miscalculated average monthly salaries), and round it up to the next integer.

SELECT CEIL(AVG(salary) - AVG(replace(Salary, '0', ''))) FROM EMPLOYEES;

--We define an employee's total earnings to be their monthly salay x months worked, and the maximum total earnings to be the maximum total earnings by an employee in the 
Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print
these 2 values as 2 space-separated integers.

SELECT MAX(months * salary), COUNT(*) FROM Employee
GROUP BY (months * salary)
ORDER BY (months * salary) DESC
LIMIT 1;

--Given the CITY and COUNTRY tables, query the sum of the populations of all cities where CONTINENT is "Asia"

SELECT SUM(CITY.POPULATION) FROM CITY
INNER JOIN COUNTRY 
ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE COUNTRY.CONTINENT = "Asia";

--Given the CITY and COUNTRY tables, query the names of all the continents(COUNTRY.Continent) and their respective average 
city populations(CITY.Population) rounded down to the nearest integer.

SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION)) FROM CITY
INNER JOIN COUNTRY 
ON CITY.COUNTRYCODE = COUNTRY.CODE
GROUP BY COUNTRY.CONTINENT;





--Intermediate:
--Generate the following two result sets:
1. Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a paranthetical
(i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
2. Query the number of occurrences of each occupation in OCCUPATIONS. Sort the occurences in ascending order, and output them in the following format:
There are a total of [occupation_count] [occupations]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name, If more than
one Occupation has the same [occupation_count], they should be ordered alphabetically.

(SELECT CONCAT(name, '(', substr(occupation, 1, 1), ')') N
FROM OCCUPATIONS) 
UNION
(SELECT CONCAT('There are a total of ', COUNT(Occupation), ' ', lower(occupation), 's.') FROM 
occupations
GROUP BY Occupation)
ORDER BY N ASC;

--You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Column Type
N      Integer
P      INteger

Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
Root: If the node is a root node.
Leaf: If the node is a leaf node.
Inner: If the node is neither root nor leaf node.

SELECT N,
CASE 
WHEN P IS NULL THEN 'Root'
WHEN N in (SELECT DISTINCT P FROM BST) THEN 'Inner'
ELSE 'Leaf'
END AS node_type
FROM BST
ORDER BY N;

--Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: 
Founder > Lead Manager > Senior Manager > Manager > Employee
Given the table schemas below, write a query to print the compnay_code, founder name, total number of lead managers, total number of
senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
Note:
The tables may contain duplicate records
The company_code is a string, so the sorting should not be numeric

SELECT Employee.company_code, Company.founder, COUNT(distinct Employee.lead_manager_code), COUNT(distinct Employee.senior_manager_code), 
COUNT(distinct Employee.manager_code), COUNT(distinct Employee.employee_code) FROM Employee
INNER JOIN Company 
ON Company.company_code = Employee.company_code
GROUP BY Employee.company_code, Company.founder
ORDER BY Employee.company_code;

--Consider P1(a,b) and P2(c,d) to be two points on a 2D plane.
a happens to be equal to the minimum value in Northern Latitude (LAT_N in STATION)
b happens to be equal to the minimum value in Northern Latitude (LONG_W in STATION)
c happens to be equal to the maximum value in Northern Latitude (LAT_N in STATION)
d happens to be equal to the maximum value in Northern Latitude (LONG_W in STATION)
Query the Manhattan Distance etween points P1 and P2 and roun it to a scale of decimal places

SELECT ROUND(((abs(MIN(LAT_N)-MAX(LAT_N)))+(abs(MIN(LONG_W)-MAX(LONG_W)))), 4) FROM STATION;

--Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and
maximum values of Northern Latitude(LAT_N) and (c,d) are the respective minimum and maximum values of Western 
Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points P1 and P2 and format you answer to display 4 decimal digits.

SELECT ROUND(SQRT(POWER(MIN(LAT_N)-MAX(LAT_N),2)+POWER(MIN(LONG_W)-MAX(LONG_W),2)),4) FROM STATION;

--You are given two tables: Students and Grades. Students contains three columns ID, Name, and Marks.
Grades contains Grade, Min_Mark and Max_mark.
Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. 
Ketty doesn't want the NAMES of those students who received a grade lower than 8. 
The report must be in descending order by grade -- i.e. higher grades are entered first. 
If there is more than one student with the same grade (8-10) assigned to them, order those particular 
students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name 
and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, 
order those particular students by their marks in ascending order.
Write a query to help Eve.

SELECT 
CASE 
WHEN Grades.Grade < 8 THEN NULL 
ELSE Students.Name
END as Name,
Grades.Grade, Students.Marks FROM Students  
INNER JOIN Grades 
ON Students.Marks BETWEEN Grades.Min_Mark AND Grades.Max_Mark
ORDER BY Grades.Grade DESC, Students.Name;

--Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name 
of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score.
If more than one hacker received full scores in the same number of challenges, then sort them by ascending hacker_id.

SELECT Hackers.hacker_id, Hackers.name FROM Submissions
INNER JOIN Hackers 
ON Hackers.hacker_id = Submissions.hacker_id
INNER JOIN Challenges
ON Challenges.challenge_id = Submissions.challenge_id
INNER JOIN Difficulty
ON Difficulty.difficulty_level = Challenges.difficulty_level
WHERE Difficulty.score = Submissions.score
AND Difficulty.difficulty_level = Challenges.difficulty_level
GROUP BY Hackers.hacker_id,Hackers.name
HAVING COUNT(Submissions.submission_id) > 1
ORDER BY COUNT(Submissions.submission_id) DESC, Hackers.hacker_id;



